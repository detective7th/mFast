default namespace td = "http://www.fixprotocol.org/ns/fast/td/1.1"
namespace local = ""
start = templates | template
templates = element templates { ( nsAttr?, templateNsAttr?, dictionaryAttr?, template* ) & other }
template = element template { ( templateNsName, nsAttr?, dictionaryAttr?, typeRef?, instruction* ) & other }
typeRef = element typeRef { nameAttr, nsAttr?, other }
instruction = field | templateRef
fieldInstrContent = ( nsName, presenceAttr?, fieldOp? ) & other
field = integerField | decimalField | asciiStringField | unicodeStringField | byteVectorField | sequence | group
integerField = element int32 { fieldInstrContent } | element uInt32 { fieldInstrContent } | element int64 { fieldInstrContent } | element uInt64 { fieldInstrContent }
decimalField = element decimal { ( nsName, presenceAttr?, ( fieldOp | decFieldOp ) ) & other }
decFieldOp = element exponent { fieldOp & other }?, element mantissa { fieldOp & other }?
asciiStringField = element string { fieldInstrContent, attribute charset { "ascii" }? }
unicodeStringField = element string { byteVectorLength?, fieldInstrContent, attribute charset { "unicode" } }
byteVectorField = element byteVector { byteVectorLength?, fieldInstrContent }
byteVectorLength = element length { nsName }
sequence = element sequence { ( nsName, presenceAttr?, dictionaryAttr?, typeRef?, length?, instruction* ) & other }
length = element length { ( nsName?, fieldOp? ) & other }
group = element group { ( nsName, presenceAttr?, dictionaryAttr?, typeRef?, instruction* ) & other }
fieldOp = constant | \default | copy | increment | delta | tail
constant = element constant { initialValueAttr & other }
\default = element default { initialValueAttr? & other }
copy = element copy { opContext }
increment = element increment { opContext }
delta = element delta { opContext }
tail = element tail { opContext }
initialValueAttr = attribute value { text }
opContext = ( dictionaryAttr?, nsKey?, initialValueAttr? ) & other
dictionaryAttr = attribute dictionary { "template" | "type" | "global" | string }
nsKey = keyAttr, nsAttr?
keyAttr = attribute key { token }
templateRef = element templateRef { ( nameAttr, templateNsAttr? )?, other }
presenceAttr = attribute presence { "mandatory" | "optional" }
nsName = nameAttr, nsAttr?, idAttr?
templateNsName = nameAttr, templateNsAttr?, idAttr?
nameAttr = attribute name { token }
nsAttr = attribute ns { text }
templateNsAttr = attribute templateNs { text }
idAttr = attribute id { token }
other = foreignAttr*, foreignElm*
foreignElm = element * - td:* { any }
foreignAttr = attribute * - (local:* | td:*) { text }
any = attribute * { text }*, ( text | element * { any } )*
